package com.ontology.sourcing;

import com.alibaba.fastjson.JSON;
import com.github.ontio.OntSdk;
import com.github.ontio.account.Account;
import com.github.ontio.common.Address;
import com.github.ontio.common.Helper;
import com.github.ontio.core.transaction.Transaction;
import com.github.ontio.sdk.exception.SDKException;
import com.github.ontio.smartcontract.neovm.abi.BuildParams;
import com.ontology.sourcing.utils.GlobalVariable;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.*;

@RunWith(SpringRunner.class)
@SpringBootTest
public class ContractTests02 {

    //
    private OntSdk ontSdk = GlobalVariable.getOntSdk("http://polaris1.ont.io", "/Volumes/Data/_work/201802_Ontology/ONTSouring/ont-sourcing/config/wallet.json");

    // 付款的数字钱包
    private com.github.ontio.account.Account payerAccount = GlobalVariable.getInstanceOfAccount("6a62d116e416246f974229eee7d1b0894d8c2ab70446856e85e35b7f5d37adef");

    // AVM字节码
    private String contractCode = "0112c56b6c766b00527ac46c766b51527ac4616c766b00c306436f6d6d6974876c766b52527ac46c766b52c3647100616c766b51c3c0539c009c6c766b56527ac46c766b56c3640e00006c766b57527ac46297016c766b51c300c36c766b53527ac46c766b51c351c36c766b54527ac46c766b51c352c36c766b55527ac46c766b53c36c766b54c36c766b55c36152726561016c766b57527ac4624e016c766b00c3065265766f6b65876c766b58527ac46c766b58c3645d00616c766b51c3c0529c009c6c766b5b527ac46c766b5bc3640e00006c766b57527ac4620d016c766b51c300c36c766b59527ac46c766b51c351c36c766b5a527ac46c766b59c36c766b5ac3617c658d026c766b57527ac462d8006c766b00c309476574537461747573876c766b5c527ac46c766b5cc3644900616c766b51c3c0519c009c6c766b5e527ac46c766b5ec3640e00006c766b57527ac46294006c766b51c300c36c766b5d527ac46c766b5dc3616580046c766b57527ac46273006c766b00c30755706772616465876c766b5f527ac46c766b5fc3644b00616c766b51c3c0519c009c6c766b0111527ac46c766b0111c3640e00006c766b57527ac4622f006c766b51c300c36c766b60527ac46c766b60c36165b3046c766b57527ac4620e00006c766b57527ac46203006c766b57c3616c756658c56b6c766b00527ac46c766b51527ac46c766b52527ac46161681953797374656d2e53746f726167652e476574436f6e746578746c766b00c3617c681253797374656d2e53746f726167652e4765746c766b53527ac46c766b53c300a06c766b56527ac46c766b56c364440061616c766b00c309206578697374656421617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b57527ac462ee006154c56c766b54527ac46c766b54c36c766b00c3007cc46c766b54c351537cc46c766b54c36c766b51c3517cc46c766b54c36c766b52c3527cc46c766b54c361681853797374656d2e52756e74696d652e53657269616c697a656c766b55527ac461681953797374656d2e53746f726167652e476574436f6e746578746c766b00c36c766b55c3615272681253797374656d2e53746f726167652e50757461616c766b51c31320637265617465206e657720636c61696d3a206c766b00c3615272045075736854c1681553797374656d2e52756e74696d652e4e6f7469667961516c766b57527ac46203006c766b57c3616c756659c56b6c766b00527ac46c766b51527ac46161681953797374656d2e53746f726167652e476574436f6e746578746c766b00c3617c681253797374656d2e53746f726167652e4765746c766b52527ac46c766b52c3009c6c766b55527ac46c766b55c364480061616c766b00c30d206e6f74206578697374656421617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b56527ac462a7016c766b52c361681a53797374656d2e52756e74696d652e446573657269616c697a656c766b53527ac46c766b53c353c3519c009c6c766b57527ac46c766b57c3644b0061616c766b00c31020696e76616c6964207374617475732e617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b56527ac4621c016c766b53c351c36c766b51c3617c656102009c6c766b58527ac46c766b58c364440061616c766b51c30920696e76616c69642e617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b56527ac462b9006c766b53c300537cc46c766b53c361681853797374656d2e52756e74696d652e53657269616c697a656c766b54527ac461681953797374656d2e53746f726167652e476574436f6e746578746c766b00c36c766b54c3615272681253797374656d2e53746f726167652e50757461616c766b51c30f207265766f6b6520636c61696d3a206c766b00c3615272045075736854c1681553797374656d2e52756e74696d652e4e6f7469667961516c766b56527ac46203006c766b56c3616c756653c56b6c766b00527ac46161681953797374656d2e53746f726167652e476574436f6e746578746c766b00c3617c681253797374656d2e53746f726167652e4765746c766b51527ac4616c766b00c309207374617475733a206c766b51c3615272045075736854c1681553797374656d2e52756e74696d652e4e6f74696679616c766b51c36c766b52527ac46203006c766b52c3616c756653c56b6c766b00527ac46161140a7714eb5a0b4f369bd080bb4cd30e2d4d35f44c61681b53797374656d2e52756e74696d652e436865636b5769746e657373009c6c766b51527ac46c766b51c3640e00006c766b52527ac46254006c766b00c35100000000006156795179587275517275557952795772755272755479537956727553727568194f6e746f6c6f67792e436f6e74726163742e4d69677261746575516c766b52527ac46203006c766b52c3616c756657c56b6c766b00527ac46c766b51527ac4616c766b00c3c06c766b51c3c09c009c6c766b52527ac46c766b52c3640f0061006c766b53527ac4627900006c766b54527ac4624800616c766b00c36c766b54c3517f6c766b51c36c766b54c3517f9c009c6c766b55527ac46c766b55c3640e00006c766b53527ac4623800616c766b54c351936c766b54527ac46c766b54c36c766b00c3c09f6c766b56527ac46c766b56c363a3ff516c766b53527ac46203006c766b53c3616c7566";

    // 合约哈希/合约地址/contract address
    private String codeAddr = Address.AddressFromVmCode(contractCode).toHexString();
    // 36d82d37e66300addcb3c231de0f6027ac176e97
    // TODO ABI


    // deployContract
    @Test
    public void example01() throws Exception {

        //
        ontSdk.vm().setCodeAddress(codeAddr);
        Transaction tx = ontSdk.vm().makeDeployCodeTransaction(contractCode,
                                                               true,
                                                               "name",
                                                               "v1.0",
                                                               "author",
                                                               "email",
                                                               "description",
                                                               this.payerAccount.getAddressU160().toBase58(),
                                                               20200000L,
                                                               GlobalVariable.DEFAULT_GAS_PRICE);
        System.out.println(tx);
        // com.github.ontio.core.payload.DeployCode@d1cf9df7

        //
        ontSdk.signTx(tx, new Account[][]{{payerAccount}});
        String txHex = Helper.toHexString(tx.toArray());
        System.out.println(txHex);
/*
00d05fee6c74f401000000000000002d31010000000008f9ab5e636832dcb77f27c5d721cb9d5374287dfdf3070112c56b6c766b00527ac46c766b51527ac4616c766b00c306436f6d6d6974876c766b52527ac46c766b52c3647100616c766b51c3c0539c009c6c766b56527ac46c766b56c3640e00006c766b57527ac46297016c766b51c300c36c766b53527ac46c766b51c351c36c766b54527ac46c766b51c352c36c766b55527ac46c766b53c36c766b54c36c766b55c36152726561016c766b57527ac4624e016c766b00c3065265766f6b65876c766b58527ac46c766b58c3645d00616c766b51c3c0529c009c6c766b5b527ac46c766b5bc3640e00006c766b57527ac4620d016c766b51c300c36c766b59527ac46c766b51c351c36c766b5a527ac46c766b59c36c766b5ac3617c658d026c766b57527ac462d8006c766b00c309476574537461747573876c766b5c527ac46c766b5cc3644900616c766b51c3c0519c009c6c766b5e527ac46c766b5ec3640e00006c766b57527ac46294006c766b51c300c36c766b5d527ac46c766b5dc3616580046c766b57527ac46273006c766b00c30755706772616465876c766b5f527ac46c766b5fc3644b00616c766b51c3c0519c009c6c766b0111527ac46c766b0111c3640e00006c766b57527ac4622f006c766b51c300c36c766b60527ac46c766b60c36165b3046c766b57527ac4620e00006c766b57527ac46203006c766b57c3616c756658c56b6c766b00527ac46c766b51527ac46c766b52527ac46161681953797374656d2e53746f726167652e476574436f6e746578746c766b00c3617c681253797374656d2e53746f726167652e4765746c766b53527ac46c766b53c300a06c766b56527ac46c766b56c364440061616c766b00c309206578697374656421617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b57527ac462ee006154c56c766b54527ac46c766b54c36c766b00c3007cc46c766b54c351537cc46c766b54c36c766b51c3517cc46c766b54c36c766b52c3527cc46c766b54c361681853797374656d2e52756e74696d652e53657269616c697a656c766b55527ac461681953797374656d2e53746f726167652e476574436f6e746578746c766b00c36c766b55c3615272681253797374656d2e53746f726167652e50757461616c766b51c31320637265617465206e657720636c61696d3a206c766b00c3615272045075736854c1681553797374656d2e52756e74696d652e4e6f7469667961516c766b57527ac46203006c766b57c3616c756659c56b6c766b00527ac46c766b51527ac46161681953797374656d2e53746f726167652e476574436f6e746578746c766b00c3617c681253797374656d2e53746f726167652e4765746c766b52527ac46c766b52c3009c6c766b55527ac46c766b55c364480061616c766b00c30d206e6f74206578697374656421617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b56527ac462a7016c766b52c361681a53797374656d2e52756e74696d652e446573657269616c697a656c766b53527ac46c766b53c353c3519c009c6c766b57527ac46c766b57c3644b0061616c766b00c31020696e76616c6964207374617475732e617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b56527ac4621c016c766b53c351c36c766b51c3617c656102009c6c766b58527ac46c766b58c364440061616c766b51c30920696e76616c69642e617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b56527ac462b9006c766b53c300537cc46c766b53c361681853797374656d2e52756e74696d652e53657269616c697a656c766b54527ac461681953797374656d2e53746f726167652e476574436f6e746578746c766b00c36c766b54c3615272681253797374656d2e53746f726167652e50757461616c766b51c30f207265766f6b6520636c61696d3a206c766b00c3615272045075736854c1681553797374656d2e52756e74696d652e4e6f7469667961516c766b56527ac46203006c766b56c3616c756653c56b6c766b00527ac46161681953797374656d2e53746f726167652e476574436f6e746578746c766b00c3617c681253797374656d2e53746f726167652e4765746c766b51527ac4616c766b00c309207374617475733a206c766b51c3615272045075736854c1681553797374656d2e52756e74696d652e4e6f74696679616c766b51c36c766b52527ac46203006c766b52c3616c756653c56b6c766b00527ac46161140a7714eb5a0b4f369bd080bb4cd30e2d4d35f44c61681b53797374656d2e52756e74696d652e436865636b5769746e657373009c6c766b51527ac46c766b51c3640e00006c766b52527ac46254006c766b00c35100000000006156795179587275517275557952795772755272755479537956727553727568194f6e746f6c6f67792e436f6e74726163742e4d69677261746575516c766b52527ac46203006c766b52c3616c756657c56b6c766b00527ac46c766b51527ac4616c766b00c3c06c766b51c3c09c009c6c766b52527ac46c766b52c3640f0061006c766b53527ac4627900006c766b54527ac4624800616c766b00c36c766b54c3517f6c766b51c36c766b54c3517f9c009c6c766b55527ac46c766b55c3640e00006c766b53527ac4623800616c766b54c351936c766b54527ac46c766b54c36c766b00c3c09f6c766b56527ac46c766b56c363a3ff516c766b53527ac46203006c766b53c3616c756601046e616d650476312e3006617574686f7205656d61696c0b6465736372697074696f6e0001424101383bc87355d62c905eb9ca7cc6f6919618560ff0d99fa994d125e486e8b53e97f6c4bbe88cbb63a183dc8569877b8b392d48ceee8b522b69ebe69490f4c244f1232102768cb1cb94069d80c39f734ac3819c79536f4954429d375d26e9192861cc39e7ac
 */

        //
        Object result = ontSdk.getConnect().syncSendRawTransaction(txHex);
/*
POST url=http://polaris1.ont.io:20334/api/v1/transaction,{},
{
    "Action":"sendrawtransaction",
    "Version":"v1.0.0",
    "Data":"00d05fee6c74f401000000000000002d31010000000008f9ab5e636832dcb77f27c5d721cb9d5374287dfdf3070112c56b6c766b00527ac46c766b51527ac4616c766b00c306436f6d6d6974876c766b52527ac46c766b52c3647100616c766b51c3c0539c009c6c766b56527ac46c766b56c3640e00006c766b57527ac46297016c766b51c300c36c766b53527ac46c766b51c351c36c766b54527ac46c766b51c352c36c766b55527ac46c766b53c36c766b54c36c766b55c36152726561016c766b57527ac4624e016c766b00c3065265766f6b65876c766b58527ac46c766b58c3645d00616c766b51c3c0529c009c6c766b5b527ac46c766b5bc3640e00006c766b57527ac4620d016c766b51c300c36c766b59527ac46c766b51c351c36c766b5a527ac46c766b59c36c766b5ac3617c658d026c766b57527ac462d8006c766b00c309476574537461747573876c766b5c527ac46c766b5cc3644900616c766b51c3c0519c009c6c766b5e527ac46c766b5ec3640e00006c766b57527ac46294006c766b51c300c36c766b5d527ac46c766b5dc3616580046c766b57527ac46273006c766b00c30755706772616465876c766b5f527ac46c766b5fc3644b00616c766b51c3c0519c009c6c766b0111527ac46c766b0111c3640e00006c766b57527ac4622f006c766b51c300c36c766b60527ac46c766b60c36165b3046c766b57527ac4620e00006c766b57527ac46203006c766b57c3616c756658c56b6c766b00527ac46c766b51527ac46c766b52527ac46161681953797374656d2e53746f726167652e476574436f6e746578746c766b00c3617c681253797374656d2e53746f726167652e4765746c766b53527ac46c766b53c300a06c766b56527ac46c766b56c364440061616c766b00c309206578697374656421617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b57527ac462ee006154c56c766b54527ac46c766b54c36c766b00c3007cc46c766b54c351537cc46c766b54c36c766b51c3517cc46c766b54c36c766b52c3527cc46c766b54c361681853797374656d2e52756e74696d652e53657269616c697a656c766b55527ac461681953797374656d2e53746f726167652e476574436f6e746578746c766b00c36c766b55c3615272681253797374656d2e53746f726167652e50757461616c766b51c31320637265617465206e657720636c61696d3a206c766b00c3615272045075736854c1681553797374656d2e52756e74696d652e4e6f7469667961516c766b57527ac46203006c766b57c3616c756659c56b6c766b00527ac46c766b51527ac46161681953797374656d2e53746f726167652e476574436f6e746578746c766b00c3617c681253797374656d2e53746f726167652e4765746c766b52527ac46c766b52c3009c6c766b55527ac46c766b55c364480061616c766b00c30d206e6f74206578697374656421617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b56527ac462a7016c766b52c361681a53797374656d2e52756e74696d652e446573657269616c697a656c766b53527ac46c766b53c353c3519c009c6c766b57527ac46c766b57c3644b0061616c766b00c31020696e76616c6964207374617475732e617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b56527ac4621c016c766b53c351c36c766b51c3617c656102009c6c766b58527ac46c766b58c364440061616c766b51c30920696e76616c69642e617c084572726f724d736753c1681553797374656d2e52756e74696d652e4e6f7469667961006c766b56527ac462b9006c766b53c300537cc46c766b53c361681853797374656d2e52756e74696d652e53657269616c697a656c766b54527ac461681953797374656d2e53746f726167652e476574436f6e746578746c766b00c36c766b54c3615272681253797374656d2e53746f726167652e50757461616c766b51c30f207265766f6b6520636c61696d3a206c766b00c3615272045075736854c1681553797374656d2e52756e74696d652e4e6f7469667961516c766b56527ac46203006c766b56c3616c756653c56b6c766b00527ac46161681953797374656d2e53746f726167652e476574436f6e746578746c766b00c3617c681253797374656d2e53746f726167652e4765746c766b51527ac4616c766b00c309207374617475733a206c766b51c3615272045075736854c1681553797374656d2e52756e74696d652e4e6f74696679616c766b51c36c766b52527ac46203006c766b52c3616c756653c56b6c766b00527ac46161140a7714eb5a0b4f369bd080bb4cd30e2d4d35f44c61681b53797374656d2e52756e74696d652e436865636b5769746e657373009c6c766b51527ac46c766b51c3640e00006c766b52527ac46254006c766b00c35100000000006156795179587275517275557952795772755272755479537956727553727568194f6e746f6c6f67792e436f6e74726163742e4d69677261746575516c766b52527ac46203006c766b52c3616c756657c56b6c766b00527ac46c766b51527ac4616c766b00c3c06c766b51c3c09c009c6c766b52527ac46c766b52c3640f0061006c766b53527ac4627900006c766b54527ac4624800616c766b00c36c766b54c3517f6c766b51c36c766b54c3517f9c009c6c766b55527ac46c766b55c3640e00006c766b53527ac4623800616c766b54c351936c766b54527ac46c766b54c36c766b00c3c09f6c766b56527ac46c766b56c363a3ff516c766b53527ac46203006c766b53c3616c756601046e616d650476312e3006617574686f7205656d61696c0b6465736372697074696f6e0001424101383bc87355d62c905eb9ca7cc6f6919618560ff0d99fa994d125e486e8b53e97f6c4bbe88cbb63a183dc8569877b8b392d48ceee8b522b69ebe69490f4c244f1232102768cb1cb94069d80c39f734ac3819c79536f4954429d375d26e9192861cc39e7ac"
}
 */
        // Transaction hash is: 01efcdb47593428d4363831ba4f14d5bbb6467f5d91357e3a3c33e24d224340e, Please waitting result...

        System.out.println(result);
/*
{
    "GasConsumed":10100000000,
    "Notify":[
        {
            "States":[
                "transfer",
                "AGbL9NGxBosqRxiD34ZXPHigeti5AZBnfP",
                "AFmseVrdL9f9oyCzZefL9tG6UbviEH9ugK",
                10100000000
            ],
            "ContractAddress":"0200000000000000000000000000000000000000"
        }
    ],
    "TxHash":"01efcdb47593428d4363831ba4f14d5bbb6467f5d91357e3a3c33e24d224340e",
    "State":1
}
 */
    }

    @Test
    public void example02() throws Exception {

        List paramList = new ArrayList<>();
        paramList.add("Commit".getBytes());

        List args = new ArrayList();
        args.add("file hash");
        args.add("file comment");
        args.add("user ontid");

        paramList.add(args);
        byte[] params = BuildParams.createCodeParamsScript(paramList);

        //
        System.out.println(codeAddr);
        // 36d82d37e66300addcb3c231de0f6027ac176e97
        System.out.println(Helper.reverse(codeAddr));
        // 976e17ac27600fde31c2b3dcad0063e6372dd836

        //
        Map<String, String> map = invokeContractPreExec(Helper.reverse(codeAddr), null, params, payerAccount, ontSdk.DEFAULT_GAS_LIMIT, GlobalVariable.DEFAULT_GAS_PRICE);

        //
        String txhash = map.get("txhash");
        System.out.println(txhash);
        // f5089e6d011f219ccbb0560524080d585171946bf2367f1ceeb0476993eba29c

        String result = map.get("result");
        System.out.println(result);
/*
{
    "Notify":[
        {
            "States":[
                "50757368",
                "66696c6520636f6d6d656e74",
                "20637265617465206e657720636c61696d3a20",
                "66696c652068617368"
            ],
            "ContractAddress":"36d82d37e66300addcb3c231de0f6027ac176e97"
        }
    ],
    "State":1,
    "Gas":20000,
    "Result":"01"
}
 */

        String s1 = JSON.parseObject(result).getString("Result");
        System.out.println(s1);
        // 01

        byte[] s2 = Helper.hexToBytes(s1);

        String s3 = new String(s2);
        System.out.println(s3);
        //
    }

    @Test
    public void example03() throws Exception {

        List paramList = new ArrayList<>();
        paramList.add("GetStatus".getBytes());

        List args = new ArrayList();
        args.add("file hash");

        paramList.add(args);
        byte[] params = BuildParams.createCodeParamsScript(paramList);

        //
        Map<String, String> map = invokeContractPreExec(Helper.reverse(codeAddr), null, params, payerAccount, ontSdk.DEFAULT_GAS_LIMIT, GlobalVariable.DEFAULT_GAS_PRICE);

        //
        String txhash = map.get("txhash");
        System.out.println(txhash);
        // d07027e71f22c7629dc11f5fde5bdd0f7b713a60df113d482dc17578e5529841

        String result = map.get("result");
        System.out.println(result);
/*
{
    "Notify":[
        {
            "States":[
                "50757368",
                "66696c652068617368",
                "207374617475733a20",
                ""
            ],
            "ContractAddress":"36d82d37e66300addcb3c231de0f6027ac176e97"
        }
    ],
    "State":1,
    "Gas":20000,
    "Result":""
}
 */

        String s1 = JSON.parseObject(result).getString("Result");
        System.out.println(s1);
        //

        byte[] s2 = Helper.hexToBytes(s1);

        String s3 = new String(s2);
        System.out.println(s3);
    }

    @Test
    public void example00() {

        // TODO 查不到？
        // f5089e6d011f219ccbb0560524080d585171946bf2367f1ceeb0476993eba29c
    }

    public Map<String, String> invokeContractPreExec(String codeAddr, String method, byte[] params, Account payerAcct, long gaslimit, long gasprice) throws Exception {

        //
        if (payerAcct == null) {
            throw new SDKException("params should not be null");
        }
        if (gaslimit < 0 || gasprice < 0) {
            throw new SDKException("gaslimit or gasprice should not be less than 0");
        }

        //
        Map<String, String> map = new HashMap<String, String>();

        Transaction tx = ontSdk.vm().makeInvokeCodeTransaction(codeAddr, method, params, payerAcct.getAddressU160().toBase58(), gaslimit, gasprice);
        System.out.println(tx);
        // com.github.ontio.core.payload.InvokeCode@fecc2faa

        //
        ontSdk.addSign(tx, payerAcct);

        //
        Object result = ontSdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
        // result = ontSdk.getConnect().sendRawTransaction(tx.toHexString());  // TODO 返回的是 boolean

        //
        String txhash = tx.hash().toString();

        //
        map.put("txhash", txhash);
        map.put("result", result.toString());
        return map;
    }

}
