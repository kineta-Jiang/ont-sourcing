<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ontology.sourcing.mapper.contract.ContractMapper">
	<resultMap id="BaseResultMap" type="com.ontology.sourcing.dao.contract.Contract">
		<result column="ontid" jdbcType="VARCHAR" property="ontid"/>
		<result column="company_ontid" jdbcType="VARCHAR" property="companyOntid"/>
		<result column="txhash" jdbcType="VARCHAR" property="txhash"/>
		<result column="filehash" jdbcType="VARCHAR" property="filehash"/>
		<result column="type" jdbcType="VARCHAR" property="type"/>
		<result column="timestamp" jdbcType="TIMESTAMP" property="timestamp"/>
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
		<result column="status" jdbcType="INTEGER" property="status"/>
		<result column="revoke_tx" jdbcType="VARCHAR" property="revokeTx"/>
	</resultMap>
	<resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.ontology.sourcing.dao.contract.Contract">
		<result column="detail" jdbcType="LONGVARCHAR" property="detail"/>
		<result column="timestamp_sign" jdbcType="LONGVARCHAR" property="timestampSign"/>
	</resultMap>

	<sql id="Base_Column_List">
		ontid, company_ontid, txhash, filehash, type, timestamp, create_time, update_time, status, revoke_tx
	</sql>
	<sql id="Blob_Column_List">
		detail, timestamp_sign
	</sql>

	<insert id="insert" parameterType="com.ontology.sourcing.dao.contract.Contract">
		insert into ${tableName} (ontid, company_ontid, txhash, filehash, type,
		timestamp, create_time, update_time,
		detail, timestamp_sign)
		values (#{record.ontid,jdbcType=VARCHAR}, #{record.companyOntid,jdbcType=VARCHAR}, #{record.txhash,jdbcType=VARCHAR}, #{record.filehash,jdbcType=VARCHAR},
		#{record.type,jdbcType=VARCHAR},
		#{record.timestamp,jdbcType=TIMESTAMP}, #{record.createTime,jdbcType=TIMESTAMP}, #{record.updateTime,jdbcType=TIMESTAMP},
		#{record.detail,jdbcType=LONGVARCHAR}, #{record.timestampSign,jdbcType=LONGVARCHAR})
	</insert>

	<insert id="insertSelective" parameterType="com.ontology.sourcing.dao.contract.Contract">
		insert into ${tableName}
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="record.ontid != null">
				ontid,
			</if>
			<if test="record.companyOntid != null">
				company_ontid,
			</if>
			<if test="record.txhash != null">
				txhash,
			</if>
			<if test="record.filehash != null">
				filehash,
			</if>
			<if test="record.type != null">
				type,
			</if>
			<if test="record.timestamp != null">
				timestamp,
			</if>
			<if test="record.createTime != null">
				create_time,
			</if>
			<if test="record.updateTime != null">
				update_time,
			</if>
			<if test="record.detail != null">
				detail,
			</if>
			<if test="record.timestampSign != null">
				timestamp_sign,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="record.ontid != null">
				#{record.ontid,jdbcType=VARCHAR},
			</if>
			<if test="record.companyOntid != null">
				#{record.companyOntid,jdbcType=VARCHAR},
			</if>
			<if test="record.txhash != null">
				#{record.txhash,jdbcType=VARCHAR},
			</if>
			<if test="record.filehash != null">
				#{record.filehash,jdbcType=VARCHAR},
			</if>
			<if test="record.type != null">
				#{record.type,jdbcType=VARCHAR},
			</if>
			<if test="record.timestamp != null">
				#{record.timestamp,jdbcType=TIMESTAMP},
			</if>
			<if test="record.createTime != null">
				#{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.updateTime != null">
				#{record.updateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.detail != null">
				#{record.detail,jdbcType=LONGVARCHAR},
			</if>
			<if test="record.timestampSign != null">
				#{record.timestampSign,jdbcType=LONGVARCHAR},
			</if>
		</trim>
	</insert>

	<insert id="insertBatch">
		INSERT INTO ${tableName} (ontid, company_ontid, txhash, filehash, type,
		timestamp, create_time, update_time,
		detail, timestamp_sign)
		VALUES
		<foreach collection="contractList" item="record" separator=",">
			(#{record.ontid,jdbcType=VARCHAR}, #{record.companyOntid,jdbcType=VARCHAR}, #{record.txhash,jdbcType=VARCHAR}, #{record.filehash,jdbcType=VARCHAR},
			#{record.type,jdbcType=VARCHAR},
			#{record.timestamp,jdbcType=TIMESTAMP}, #{record.createTime,jdbcType=TIMESTAMP}, #{record.updateTime,jdbcType=TIMESTAMP},
			#{record.detail,jdbcType=LONGVARCHAR}, #{record.timestampSign,jdbcType=LONGVARCHAR})
		</foreach>
	</insert>

	<select id="deleteByOntidAndHash" parameterType="java.lang.String">
		UPDATE ${tableName}
		SET status = 1
		WHERE (filehash = #{hash,jdbcType=VARCHAR} or txhash = #{hash,jdbcType=VARCHAR})
		and (ontid = #{ontid,jdbcType=VARCHAR} or company_ontid = #{ontid,jdbcType=VARCHAR})
	</select>

	<!---->
	<select id="count" resultType="int">
		select count(*)
		from ${tableName}
		where (ontid = #{ontid,jdbcType=VARCHAR} or company_ontid = #{ontid,jdbcType=VARCHAR})
		and status = 0
	</select>

	<select id="selectByOntidAndTxHash" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List"/>
		,
		<include refid="Blob_Column_List"/>
		from ${tableName}
		where (txhash = #{txhash,jdbcType=VARCHAR}) and (ontid = #{ontid,jdbcType=VARCHAR} or company_ontid = #{ontid,jdbcType=VARCHAR}) and
		status = 0
		order by create_time desc
	</select>

	<select id="selectByOntidAndHash" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List"/>
		,
		<include refid="Blob_Column_List"/>
		from ${tableName}
		where (filehash = #{hash,jdbcType=VARCHAR} or txhash = #{hash,jdbcType=VARCHAR}) and (ontid = #{ontid,jdbcType=VARCHAR} or company_ontid = #{ontid,jdbcType=VARCHAR}) and
		status = 0
		order by create_time desc
	</select>

	<select id="selectByOntidPageNumSize" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List"/>
		,
		<include refid="Blob_Column_List"/>
		from ${tableName}
		where ( ontid = #{ontid,jdbcType=VARCHAR} or company_ontid = #{ontid,jdbcType=VARCHAR} ) and status = 0
		order by create_time desc limit #{start}, #{offset}
	</select>

	<select id="selectByOntidPageNumSizeAndType" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List"/>
		,
		<include refid="Blob_Column_List"/>
		from ${tableName}
		where (ontid = #{ontid,jdbcType=VARCHAR} or company_ontid = #{ontid,jdbcType=VARCHAR}) and type = #{type,jdbcType=VARCHAR} and status = 0
		order by create_time desc limit #{start},#{offset}
	</select>

	<!---->

	<select id="selectByPageNumSize" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List"/>
		,
		<include refid="Blob_Column_List"/>
		from ${tableName} where status = 0 order by create_time desc limit #{start}, #{offset}
	</select>

	<select id="selectByHash" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List"/>
		,
		<include refid="Blob_Column_List"/>
		from ${tableName}
		where (filehash = #{hash,jdbcType=VARCHAR} or txhash = #{hash,jdbcType=VARCHAR}) and status = 0
		order by create_time desc
	</select>

	<update id="updateRevokeTx" parameterType="java.lang.String">
		update ${tableName}
		set revoke_tx = #{revokeTx,jdbcType=VARCHAR},
		update_time = #{updateTime,jdbcType=TIMESTAMP}
		where txhash = #{txhash,jdbcType=INTEGER}
	</update>

</mapper>